[
{
	"uri": "https://qitmeer.github.io/docs/ar/reference/qxtools/",
	"title": "أدوات QX",
	"tags": [],
	"description": "",
	"content": " qx user guide qx is a command-line tool that is a superset of bx commands and provides a variety of commands for key management and transaction construction.\nPrerequisites Update Go to version at least 1.12 (required \u0026gt;= 1.12)\nCheck your golang version\n~ go version go version go1.12 darwin/amd64  How to build ~ mkdir -p /tmp/work ~ cd /tmp/work ~ git clone https://github.com/HalalChain/qx.git ~ cd qx ~ go build ~ ./qx --version Qx Version : \u0026quot;0.0.1\u0026quot;  qx Commands ~ qx Usage: qx [--version] [--help] \u0026lt;command\u0026gt; [\u0026lt;args\u0026gt;] encode and decode : base58-encode encode a base16 string to a base58 string base58-decode decode a base58 string to a base16 string base58check-encode encode a base58check string base58check-decode decode a base58check string base64-encode encode a base16 string to a base64 string base64-encode encode a base64 string to a base16 string rlp-encode encode a string to a rlp encoded base16 string rlp-decode decode a rlp base16 string to a human-readble representation hash : blake2b256 calculate Blake2b 256 hash of a base16 data. blake2b512 calculate Blake2b 512 hash of a base16 data. sha256 calculate SHA256 hash of a base16 data. sha3-256 calculate SHA3 256 hash of a base16 data. keccak-256 calculate legacy keccak 256 hash of a bash16 data. blake256 calculate blake256 hash of a base16 data. ripemd160 calculate ripemd160 hash of a base16 data. bitcion160 calculate ripemd160(sha256(data)) hash160 calculate ripemd160(blake2b256(data)) entropy (seed) \u0026amp; mnemoic \u0026amp; hd \u0026amp; ec entropy generate a cryptographically secure pseudorandom entropy (seed) hd-new create a new HD(BIP32) private key from an entropy (seed) hd-to-ec convert the HD (BIP32) format private/public key to a EC private/public key hd-to-public derive the HD (BIP32) public key from a HD private key hd-decode decode a HD (BIP32) private/public key serialization format hd-derive Derive a child HD (BIP32) key from another HD public or private key. mnemonic-new create a mnemonic world-list (BIP39) from an entropy mnemonic-to-entropy return back to the entropy (the random seed) from a mnemonic world list (BIP39) mnemonic-to-seed convert a mnemonic world-list (BIP39) to its 512 bits seed ec-new create a new EC private key from an entropy (seed). ec-to-public derive the EC public key from an EC private key (the compressed format by default ) ec-to-wif convert an EC private key to a WIF, associates with the compressed public key by default. wif-to-ec convert a WIF private key to an EC private key. wif-to-public derive the EC public key from a WIF private key. addr \u0026amp; tx \u0026amp; sign ec-to-addr convert an EC public key to a paymant address. default is nox address tx-encode encode a unsigned transaction. tx-decode decode a transaction in base16 to json format. tx-sign sign a transactions using a private key. msg-sign create a message signature msg-verify validate a message signature signature-decode decode a ECDSA signature  Encoding Commands Encode/Decocde Qitmeer address \u0026amp; private/pubkey\nbase58-encode  encode a base16 string to a base58 string  Example ~ qx base58-decode RmCYoUMqKZopUkai2YhUFHR9UeqjeyjTAgW  # base16 string 0df144d959afb6db4ad730a6e2c0daf46ceeb98c53a059cd6527  base58-decode  decode a base58 string to a base16 string  Example ~ qx base58-decode 1234567890abcdef  # base58 string 43c9JGZmRvE  base58check-encode  base16 string into Qitmeer or BTC address.  ~ qx base58check-encode Usage: qx base58check-encode [-v \u0026lt;ver\u0026gt;] [hexstring] -a string base58check hasher -c int base58check checksum size (default 4) -v version base58check version [mainnet|testnet|privnet|btcmainnet|btctestnet|btcregressionnet] (default privnet)  Example # create qitmeer privnet address by base16 ~ qx base58check-encode c1c3092d17c917c2799c041aeaeac18822772149 # base58 string RmPwHCuC2m6gvz9TnVLapHySk1ZU72FTSru  # create btc testnet address by base16 ~ qx base58check-encode -v btctestnet c1c3092d17c917c2799c041aeaeac18822772149 # base58 string myBUMQTmZGK8yKLDranjSQEHbCYCaaywQD  "
},
{
	"uri": "https://qitmeer.github.io/docs/ar/test/",
	"title": "اختبار عرض الخط وتسليط الضوء على بناء الجملة",
	"tags": [],
	"description": "",
	"content": " To be, or not to be, Ay there's the point, To Die, to sleep, is that all? Aye all: No, to sleep, to dream, aye marry there it goes, For in that dream of death, when we awake, And borne before an everlasting Judge, From whence no passenger ever returned, The undiscovered country, at whose sight The happy smile, and the accursed damn'd. But for this, the joyful hope of this, Who'd bear the scorns and flattery of the world, Scorned by the right rich, the rich cursed of the poor? The widow being oppressed, the orphan wrong'd, The taste of hunger, or a tyrants reign, And thousand more calamities besides, To grunt and sweat under this weary life, When that he may his full Quietus make, With a bare bodkin, who would this endure, But for a hope of something after death? Which puzzles the brain, and doth confound the sense, Which makes us rather bear those evils we have, Than fly to others that we know not of. Aye that, O this conscience makes cowards of us all, Lady in thy orizons, be all my sins remembered.\n \u0026quot;To be, or not to be\u0026quot; is one of the most widely known and quoted lines in modern English, and the soliloquy has been referenced in innumerable works of theatre, literature and music.\n 春眠不觉晓，处处闻啼鸟。 夜来风雨声，花落知多少。\n 春眠不觉晓，处处闻啼鸟。 夜来风雨声，花落知多少。\n移舟泊烟渚#  日暮客愁新## 野旷天低树## 江清月近人## 江清月近人##  独上高楼望尽天涯路。 衣带渐宽终不悔，为伊消得人憔悴。 众里寻他千百度，暮然回首，那人正在灯火阑珊处。   昔我往矣，杨柳依依。今我来思，雨雪霏霏。 蒹葭（jiān jiā）苍苍，白露为霜。 所谓伊人，在水一方。 彼采葛兮，一日不见，如三月兮。彼采萧兮，一日不见，如三秋兮。彼采艾兮，一日不见，如三岁兮。  Test for headline h1 The quick brown fox jumps over the lazy dog\nTest for headline h2 The quick brown fox jumps over the lazy dog\nTest for headline h3 The quick brown fox jumps over the lazy dog\nTest for headline h4 The quick brown fox jumps over the lazy dog\nTest for headline h5 The quick brown fox jumps over the lazy dog\nTest for Text highlight Note: github don't support ==hightlight== markdown. we need to use a html 5 \u0026lt;mark\u0026gt;\n 彼采葛兮，一日不见，如三月兮。 彼采萧兮，一日不见，如三秋兮。 彼采艾兮，一日不见，如三岁兮。  Test for picture  open Keynote or Pages (instructions same after this point) Select a template. The background does not matter but white shows your work better Drag or paste in your screenshot. Note: Using control+⌘+shift+4 you can send your screenshot directly to the clipboard. Apply a drop shadow to your image Select and copy just the image and paste it into your email or desired location.  \nStackexchange Question : Screenshot of selected area with shadow\nAdd Shadow by using script #!/bin/bash convert \u0026quot;$1\u0026quot; -trim \\( +clone -background grey25 -shadow 80x40+5+30 \\) +swap -background transparent -layers merge +repage \u0026quot;$1-shadow.png\u0026quot;  The best thing is transparent drop shadow around the window without the white border.\nThe script from here\nYou might need to brew install imagemagick before using it.\n fig.1 - Before adding the shadow\n fig.2 - 阴影效果添加之后\nCreate favicon.ico convert favicon.png -define icon:auto-resize=64,48,32,16 favicon.ico  The code form here\nTest syntax highlighting go pckage main import ( \u0026quot;fmt\u0026quot; \u0026quot;time\u0026quot; ) func readword(ch chan string) { fmt.Println(\u0026quot;Type a word, then hit Enter.\u0026quot;) var word string fmt.Scanf(\u0026quot;%s\u0026quot;, \u0026amp;word) ch \u0026lt;- word } func timeout(t chan bool) { time.Sleep(5 * time.Second) t \u0026lt;- true } func main() { t := make(chan bool) go timeout(t) ch := make(chan string) go readword(ch) select { case word := \u0026lt;-ch: fmt.Println(\u0026quot;Received\u0026quot;, word) case \u0026lt;-t: fmt.Println(\u0026quot;Timeout.\u0026quot;) } }  Bash [ -r ~/.profile ] \u0026amp;\u0026amp; . ~/.profile # set up environment, once, Bourne-sh syntax only if [ -n \u0026quot;$PS1\u0026quot; ] ; then # are we interactive? [ -r ~/.bashrc ] \u0026amp;\u0026amp; . ~/.bashrc # tty/prompt/function setup for interactive shells [ -r ~/.bash_login ] \u0026amp;\u0026amp; . ~/.bash_login # any at-login tasks for login shell only fi # End of \u0026quot;if\u0026quot; block  JavaScript var counter = (function () { var i = 0; // private property return { // public methods get: function () { alert(i); }, set: function (value) { i = value; }, increment: function () { alert(++i); } }; })(); // module counter.get(); // shows 0 counter.set(6); counter.increment(); // shows 7 counter.increment(); // shows 8  HTML \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;MathJax TeX Test Page\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026quot;text/x-mathjax-config\u0026quot;\u0026gt; MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}}); \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; async src=\u0026quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_CHTML\u0026quot;\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; When $a \\ne 0$, there are two solutions to \\(ax^2 + bx + c = 0\\) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Scala var correct = 0 var questions = 0 var heads = 0 var trials = 10000 // Let's run some trials (1 to trials).foreach { trial =\u0026gt; // toss a fair coin scala.util.Random.nextBoolean() match { case true =\u0026gt; // Heads was tossed. Wake on Monday. // Sleeping Beauty always bet Heads was tossed; // ... in this case, only once. questions += 1 correct += 1 heads += 1 case _ =\u0026gt; // Tails was tossed. Wake on Monday and Tuesday. // Sleeping Beauty always bet Heads was tossed; // ... in this case, it will bet both on Monday // and Tuesday. But it will fail! questions += 2 } } println(\u0026quot;Probability of SB being correct: \u0026quot; + correct.toDouble/questions) println(\u0026quot;Probability of Heads being tossed: \u0026quot; + heads.toDouble/trials)  Here's a sample run:\nProbability of SB being correct: 0.33636242148870776 Probability of Heads being tossed: 0.5034  Test for Tables    Lex noation Set Theory Symbols 概念     \\mid \\( \\mid \\)    \\lbrace \\( \\lbrace \\rbrace \\) 也能用\\{\\}   \\in \\( a \\in A \\) a属于A element of   \\notin \\( a \\notin A \\) 不属于   \\ni \\( \\ni \\) 也能用\\owns   \\varnothing \\( \\varnothing \\) 空集   \\subset \\( A \\subset B \\) A是B的子集   \\subseteq \\( A \\subseteq B \\) A是B的子集（一般用这个）   \\subsetneq \\( A \\subsetneq B \\) A是B的真子集 proper subset   \\supset \\( B \\supset A \\) B包含A   \\supseteq \\( B \\supseteq A \\) B包含A（一般用这个）include   \\supsetneq \\( B \\supsetneq A \\) B真包含A   \\cap \\( A \\cap B \\) A与B的交集，A交B Intersection   \\cup \\( A \\cup B \\) A与B的并集，A并B Union    Test for MathJax (Tex/LaTeX) \\[ \\lbrace x \\in X \\mid x  \\frac{1}{2} \\rbrace \\]\nWhen \\(a \\ne 0\\) there are two solutions to \\(ax^2 + bx + c = 0\\) and they are \\(x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\\)\nA note for MathJax when using single $ When using the single-dollar delimiters, ”... the cost is $2.50 for the first one, and $2.00 for each additional one ...” would cause the phrase “2.50 for the first one, and” to be treated as mathematics since it falls between dollar signs. For this reason, if you want to use single-dollars for in-line math mode, you must enable that explicitly in your configuration:\n\u0026lt;script type=\u0026quot;text/x-mathjax-config\u0026quot;\u0026gt; MathJax.Hub.Config({ tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]} }); \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; async src=\u0026quot;path-to-mathjax/MathJax.js?config=TeX-AMS_CHTML\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  There has been an extensive discussion on this topic, see more details in this page.\n"
},
{
	"uri": "https://qitmeer.github.io/docs/ar/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qitmeer.github.io/docs/ar/",
	"title": "Qitmeer وثائق تقنية",
	"tags": [],
	"description": "",
	"content": " Qitmeer دليل المستندات التقنية Qitmeer/HLC دليل التطوير الكامل للوثائق\nقائمة الملفات  Qx Tools: QX هي أداة إصدار الأوامر، وهي مجموعة فائقة من الأوامر BX توفر مجموعة متنوعة من الأوامر لإدارة المفاتيح وبناء الخدمات.  "
},
{
	"uri": "https://qitmeer.github.io/docs/ar/reference/",
	"title": "References",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qitmeer.github.io/docs/ar/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]